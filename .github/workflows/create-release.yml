name: "Create release"
run-name: Create release ${{ inputs.name }}

env:
  IMAGE_REPO: europe-docker.pkg.dev/kyma-project/prod/kyma-metrics-collector
  KYMA_METRICS_COLLECTOR_REPO: ${{ github.repository_owner }}/kyma-metrics-collector
  GIT_EMAIL: kyma-eventing-bot@sap.com
  GIT_NAME: kyma-eventing-bot
  BUMP_SEC_SCANNERS_BRANCH_NAME: sec-scanners-config-${{ inputs.name }}
  BUMP_KMC_BRANCH_NAME: bump-kmc-${{ inputs.name }}

on:
  workflow_dispatch:
    inputs:
      name: # release tag
        description: "Release tag (i.e. x.y.z)"
        default: ""
        required: true
      dry-run:
        type: boolean
        description: "Do not publish"
        default: false

# Required secrets:
# - GITHUB_TOKEN
# - BOT_TOKEN

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Check if that release tag is correctly formatted
        run: "./hack/scripts/check_release_tag.sh ${{ inputs.name }}"

      - name: Check if release tag already exists
        run: |
          if [ $(git tag -l ${{ inputs.name }}) ]; then
            echo "::error ::Tag ${{ inputs.name }} already exists"
            exit 1
          fi

      - name: Check for existing artifacts from previous release runs
        run: "./hack/scripts/check_artifacts_existence.sh ${{ inputs.name }}"

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install requirements
        run: pip install -r hack/scripts/releaselabelvalidator/requirements.txt

      - name: Validate labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ env.KYMA_METRICS_COLLECTOR_REPO }}
          NAME: ${{ inputs.name }}
        run: python3 hack/scripts/releaselabelvalidator/release_label_validator.py

  run-unit-tests:
    name: Unit tests
    needs: validate-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Run tests
        run: make test

  create-draft:
    name: Create draft release
    needs:
      - validate-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Create draft release
        id: create-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository_owner }}/kyma-metrics-collector
        run: |
          RELEASE_ID=$(./hack/scripts/create_draft_release.sh ${{ github.event.inputs.name }})
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Create lightweight tag
        run: |
          git tag ${{ github.event.inputs.name }}
          git push origin ${{ github.event.inputs.name }}

    outputs:
      release_id: ${{ steps.create-draft.outputs.release_id }}

  build-image:
    name: Build image
    needs:
      - create-draft
    uses: kyma-project/test-infra/.github/workflows/image-builder.yml@main # Usage: kyma-project/test-infra/.github/workflows/image-builder.yml@main
    with:
      name: kyma-metrics-collector
      dockerfile: Dockerfile
      context: .
      tags: ${{ github.event.inputs.name }}

  check-prerequisites:
    name: Check release pre-requisites
    needs:
      - create-draft
      - run-unit-tests
      - build-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Check pre-requisites before publishing release
        run: ./hack/scripts/check_publish_release_prerequisites.sh ${{ inputs.name }}

  publish-release:
    name: Publish release
    needs:
      - check-prerequisites
      - create-draft
    if: ${{ !inputs.dry-run }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout main
          ./hack/scripts/publish_release.sh ${{ needs.create-draft.outputs.release_id }}
