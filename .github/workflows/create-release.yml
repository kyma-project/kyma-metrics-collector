name: "Create release"
run-name: Create release ${{ inputs.name }}

env:
  IMAGE_REPO: europe-docker.pkg.dev/kyma-project/prod/kyma-metrics-collector
  KYMA_METRICS_COLLECTOR_REPO: ${{ github.repository_owner }}/kyma-metrics-collector
  GIT_EMAIL: kyma-eventing-bot@sap.com
  GIT_NAME: kyma-eventing-bot
  BUMP_SEC_SCANNERS_BRANCH_NAME: sec-scanners-config-${{ inputs.name }}
  BUMP_KMC_BRANCH_NAME: bump-kmc-${{ inputs.name }}

on:
  workflow_dispatch:
    inputs:
      name: # release tag
        description: 'Create release'
        default: ""
        required: true
      sec-scanners-config:
        type: boolean
        description: 'Create PR with sec-scanners-config bump'
        default: true
      dry-run:
        type: boolean
        description: 'Do not publish'
        default: false

# Required secrets:
# - GITHUB_TOKEN
# - BOT_TOKEN

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if release tag already exists
        run: |
          if [ $(git tag -l ${{ inputs.name }}) ]; then
            echo "::error ::Tag ${{ inputs.name }} already exists"
            exit 1
          fi

      - name: Check for existing artifacts from previous release runs
        run: "./hack/scripts/check_artifacts_existence.sh ${{ inputs.name }}"

# it will be enabled after first release of KMC.
#      - name: Setup python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.9'
#          cache: 'pip'
#
#      - name: Install requirements
#        run: pip install -r hack/scripts/releaselabelvalidator/requirements.txt
#
#      - name: Validate labels
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          REPOSITORY: ${{ env.KYMA_METRICS_COLLECTOR_REPO }}
#          NAME: ${{ inputs.name }}
#        run: python3 hack/scripts/releaselabelvalidator/release_label_validator.py

  bump-sec-scanners-config:
    name: Bump sec-scanners-config
    needs: validate-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git pull

      - name: Update sec-scanners-config.yaml
        if: ${{ inputs.sec-scanners-config }}
        run: ./hack/scripts/create_scan_config.sh "sec-scanners-config.yaml" ${{ inputs.name }}

      - name: Create PR if anything changed
        if: ${{ inputs.sec-scanners-config }}
        env:
          GH_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          prs=$(gh pr list -A ${{ env.GIT_NAME }} --state open --json headRefName | jq -r '.[] | .headRefName')
          if echo $prs | tr " " '\n' | grep -F -q -x ${{ env.BUMP_SEC_SCANNERS_BRANCH_NAME }}; then
            echo "PR already exists, no need to create a new one"
            echo "PR_NUMBER=$(gh pr list --search "base:main head:${{ env.BUMP_SEC_SCANNERS_BRANCH_NAME }}" --json number | jq -r '.[] | .number')" >> $GITHUB_ENV
          elif [ -z "$(git status --porcelain)" ]; then
            echo "Nothing changed, no need to create PR"
            echo "PR_NUMBER=-1" >> $GITHUB_ENV
          else
            PR_STATUS=$(./hack/scripts/create_sec_scanner_bump_pr.sh ${{ inputs.name }})
            echo "PR_NUMBER=$(echo "$PR_STATUS" | tail -n 1)" >> $GITHUB_ENV
          fi

      - name: Await PR merge
        if: ${{ inputs.sec-scanners-config }}
        timeout-minutes: 45
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "$PR_NUMBER" -gt 0 ]; then
            ./hack/scripts/await_pr_merge.sh
          else
            echo "Step skipped"
          fi

      - name: Save latest commit ref
        id: pull-ref
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout main
          git stash
          git pull
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "Latest commit ref $LATEST_COMMIT"

    outputs:
      latest_commit: ${{ steps.pull-ref.outputs.latest_commit }}

  run-unit-tests:
    name: Unit tests
    needs: validate-release
    uses: kyma-project/eventing-tools/.github/workflows/unit-test-reusable.yml@main
